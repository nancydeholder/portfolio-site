(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global['ngx-pipes'] = global['ngx-pipes'] || {}),global._angular_core));
}(this, (function (exports,_angular_core) { 'use strict';

var DiffPipe = (function () {
    function DiffPipe() {
    }
    DiffPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!Array.isArray(input)) {
            return input;
        }
        // tslint:disable-next-line no-bitwise
        return args.reduce(function (d, c) { return d.filter(function (e) { return !~c.indexOf(e); }); }, input);
    };
    DiffPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'diff' },] },
    ];
    /** @nocollapse */
    DiffPipe.ctorParameters = function () { return []; };
    return DiffPipe;
}());

var InitialPipe = (function () {
    function InitialPipe() {
    }
    InitialPipe.prototype.transform = function (input, num) {
        if (num === void 0) { num = 0; }
        return Array.isArray(input)
            ? input.slice(0, input.length - num)
            : input;
    };
    InitialPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'initial' },] },
    ];
    /** @nocollapse */
    InitialPipe.ctorParameters = function () { return []; };
    return InitialPipe;
}());

var FlattenPipe = (function () {
    function FlattenPipe() {
    }
    FlattenPipe.prototype.transform = function (input, shallow) {
        if (shallow === void 0) { shallow = false; }
        if (!Array.isArray(input)) {
            return input;
        }
        return shallow
            ? [].concat.apply([], input)
            : this.flatten(input);
    };
    FlattenPipe.prototype.flatten = function (array) {
        var _this = this;
        return array.reduce(function (arr, elm) {
            if (Array.isArray(elm)) {
                return arr.concat(_this.flatten(elm));
            }
            return arr.concat(elm);
        }, []);
    };
    FlattenPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'flatten' },] },
    ];
    /** @nocollapse */
    FlattenPipe.ctorParameters = function () { return []; };
    return FlattenPipe;
}());

var IntersectionPipe = (function () {
    function IntersectionPipe() {
    }
    IntersectionPipe.prototype.transform = function (input) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!Array.isArray(input)) {
            return input;
        }
        // tslint:disable-next-line no-bitwise
        return args.reduce(function (n, c) { return n.filter(function (e) { return !!~c.indexOf(e); }); }, input);
    };
    IntersectionPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'intersection' },] },
    ];
    /** @nocollapse */
    IntersectionPipe.ctorParameters = function () { return []; };
    return IntersectionPipe;
}());

function isUndefined(value) {
    return typeof value === 'undefined';
}
function isFunction(value) {
    return typeof value === 'function';
}
function isNumber(value) {
    return typeof value === 'number';
}
function isString(value) {
    return typeof value === 'string';
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isObject(value) {
    return value !== null && typeof value === 'object';
}
function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
function applyPrecision(num, precision) {
    if (precision <= 0) {
        return Math.round(num);
    }
    var tho = Math.pow(10, precision);
    return Math.round(num * tho) / tho;
}
function extractDeepPropertyByMapKey(obj, map) {
    var keys = map.split('.');
    var head = keys.shift();
    return keys.reduce(function (prop, key) {
        return !isUndefined(prop) && !isUndefined(prop[key])
            ? prop[key]
            : undefined;
    }, obj[head || '']);
}
function getKeysTwoObjects(obj, other) {
    return Object.keys(obj).concat(Object.keys(other)).filter(function (key, index, array) { return array.indexOf(key) === index; });
}
function isDeepEqual(obj, other) {
    if (!isObject(obj) || !isObject(other)) {
        return obj === other;
    }
    return getKeysTwoObjects(obj, other).every(function (key) {
        if (!isObject(obj[key]) && !isObject(other[key])) {
            return obj[key] === other[key];
        }
        if (!isObject(obj[key]) || !isObject(other[key])) {
            return false;
        }
        return isDeepEqual(obj[key], other[key]);
    });
}

var ReversePipe = (function () {
    function ReversePipe() {
    }
    ReversePipe.prototype.transform = function (input) {
        if (isString(input)) {
            return input.split('').reverse().join('');
        }
        return Array.isArray(input)
            ? input.reverse()
            : input;
    };
    ReversePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'reverse' },] },
    ];
    /** @nocollapse */
    ReversePipe.ctorParameters = function () { return []; };
    return ReversePipe;
}());

var TailPipe = (function () {
    function TailPipe() {
    }
    TailPipe.prototype.transform = function (input, num) {
        if (num === void 0) { num = 0; }
        return Array.isArray(input) ? input.slice(num) : input;
    };
    TailPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'tail' },] },
    ];
    /** @nocollapse */
    TailPipe.ctorParameters = function () { return []; };
    return TailPipe;
}());

var TrurthifyPipe = (function () {
    function TrurthifyPipe() {
    }
    TrurthifyPipe.prototype.transform = function (input) {
        return Array.isArray(input)
            ? input.filter(function (e) { return !!e; })
            : input;
    };
    TrurthifyPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'truthify' },] },
    ];
    /** @nocollapse */
    TrurthifyPipe.ctorParameters = function () { return []; };
    return TrurthifyPipe;
}());

var UnionPipe = (function () {
    function UnionPipe() {
    }
    UnionPipe.prototype.transform = function (input, args) {
        if (args === void 0) { args = []; }
        if (!Array.isArray(input) || !Array.isArray(args)) {
            return input;
        }
        return args.reduce(function (newArr, currArr) {
            return newArr.concat(currArr.reduce(function (noDupArr, curr) {
                // tslint:disable-next-line:no-bitwise
                return (!~noDupArr.indexOf(curr) && !~newArr.indexOf(curr))
                    ? noDupArr.concat([curr])
                    : noDupArr;
            }, []));
        }, input);
    };
    UnionPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'union' },] },
    ];
    /** @nocollapse */
    UnionPipe.ctorParameters = function () { return []; };
    return UnionPipe;
}());

var UniquePipe = (function () {
    function UniquePipe() {
    }
    UniquePipe.prototype.transform = function (input, propertyName) {
        var uniques = [];
        return Array.isArray(input) ?
            isUndefined(propertyName) ?
                input.filter(function (e, i) { return input.indexOf(e) === i; }) :
                input.filter(function (e, i) {
                    var value = extractDeepPropertyByMapKey(e, propertyName);
                    value = isObject(value) ? JSON.stringify(value) : value;
                    if (isUndefined(value) || uniques[value]) {
                        return false;
                    }
                    uniques[value] = true;
                    return true;
                }) : input;
    };
    UniquePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'unique' },] },
    ];
    /** @nocollapse */
    UniquePipe.ctorParameters = function () { return []; };
    return UniquePipe;
}());

var WithoutPipe = (function () {
    function WithoutPipe() {
    }
    WithoutPipe.prototype.transform = function (input, args) {
        if (args === void 0) { args = []; }
        return Array.isArray(input)
            ? input.filter(function (e) { return !~args.indexOf(e); })
            : input;
    };
    WithoutPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'without' },] },
    ];
    /** @nocollapse */
    WithoutPipe.ctorParameters = function () { return []; };
    return WithoutPipe;
}());

var PluckPipe = (function () {
    function PluckPipe() {
    }
    PluckPipe.prototype.transform = function (input, map) {
        return Array.isArray(input)
            ? input.map(function (e) { return extractDeepPropertyByMapKey(e, map); })
            : input;
    };
    PluckPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'pluck', pure: false },] },
    ];
    /** @nocollapse */
    PluckPipe.ctorParameters = function () { return []; };
    return PluckPipe;
}());

var ShufflePipe = (function () {
    function ShufflePipe() {
    }
    // Using a version of the Fisher-Yates shuffle algorithm
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    // Using a version of the Fisher-Yates shuffle algorithm
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    ShufflePipe.prototype.transform = 
    // Using a version of the Fisher-Yates shuffle algorithm
    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle
    function (input) {
        if (!Array.isArray(input)) {
            return input;
        }
        var shuffled = input.slice();
        var n = input.length - 1;
        for (var i = 0; i < n; ++i) {
            var j = Math.floor(Math.random() * (n - i + 1)) + i;
            _a = [shuffled[j], shuffled[i]], shuffled[i] = _a[0], shuffled[j] = _a[1];
        }
        return shuffled;
        var _a;
    };
    ShufflePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'shuffle' },] },
    ];
    /** @nocollapse */
    ShufflePipe.ctorParameters = function () { return []; };
    return ShufflePipe;
}());

var EveryPipe = (function () {
    function EveryPipe() {
    }
    EveryPipe.prototype.transform = function (input, predicate) {
        return Array.isArray(input) ? input.every(predicate) : false;
    };
    EveryPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'every' },] },
    ];
    /** @nocollapse */
    EveryPipe.ctorParameters = function () { return []; };
    return EveryPipe;
}());

var SomePipe = (function () {
    function SomePipe() {
    }
    SomePipe.prototype.transform = function (input, predicate) {
        return Array.isArray(input) ? input.some(predicate) : input;
    };
    SomePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'some' },] },
    ];
    /** @nocollapse */
    SomePipe.ctorParameters = function () { return []; };
    return SomePipe;
}());

var SamplePipe = (function () {
    function SamplePipe() {
    }
    SamplePipe.prototype.transform = function (input, len) {
        if (len === void 0) { len = 1; }
        if (!Array.isArray(input)) {
            return input;
        }
        var sample = [];
        var tmp = input.slice();
        var l = len < tmp.length ? len : tmp.length;
        for (var i = 0; i < l; ++i) {
            sample = sample.concat(tmp.splice(Math.floor(Math.random() * tmp.length), 1));
        }
        return sample;
    };
    SamplePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'sample' },] },
    ];
    /** @nocollapse */
    SamplePipe.ctorParameters = function () { return []; };
    return SamplePipe;
}());

var GroupByPipe = (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, discriminator, delimiter) {
        if (discriminator === void 0) { discriminator = []; }
        if (delimiter === void 0) { delimiter = '|'; }
        if (!Array.isArray(input)) {
            return input;
        }
        return this.groupBy(input, discriminator, delimiter);
    };
    GroupByPipe.prototype.groupBy = function (list, discriminator, delimiter) {
        var _this = this;
        return list.reduce(function (acc, payload) {
            var key = _this.extractKeyByDiscriminator(discriminator, payload, delimiter);
            acc[key] = Array.isArray(acc[key])
                ? acc[key].concat([payload])
                : [payload];
            return acc;
        }, {});
    };
    GroupByPipe.prototype.extractKeyByDiscriminator = function (discriminator, payload, delimiter) {
        if (isFunction(discriminator)) {
            return discriminator(payload);
        }
        if (Array.isArray(discriminator)) {
            return discriminator.map(function (k) { return extractDeepPropertyByMapKey(payload, k); }).join(delimiter);
        }
        return extractDeepPropertyByMapKey(payload, discriminator);
    };
    GroupByPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'groupBy' },] },
    ];
    /** @nocollapse */
    GroupByPipe.ctorParameters = function () { return []; };
    return GroupByPipe;
}());

// tslint:disable no-bitwise
var FilterByPipe = (function () {
    function FilterByPipe() {
    }
    FilterByPipe.prototype.transform = function (input, props, search, strict) {
        if (search === void 0) { search = ''; }
        if (strict === void 0) { strict = false; }
        if (!Array.isArray(input) || (!isString(search) && !isNumberFinite(search) && !isBoolean(search))) {
            return input;
        }
        var term = String(search).toLowerCase();
        return input.filter(function (obj) {
            return props.some(function (prop) {
                var value = extractDeepPropertyByMapKey(obj, prop);
                var strValue = String(value).toLowerCase();
                if (isUndefined(value)) {
                    return false;
                }
                return strict
                    ? term === strValue
                    : !!~strValue.indexOf(term);
            });
        });
    };
    FilterByPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'filterBy' },] },
    ];
    /** @nocollapse */
    FilterByPipe.ctorParameters = function () { return []; };
    return FilterByPipe;
}());

var OrderByPipe = (function () {
    function OrderByPipe() {
    }
    OrderByPipe.prototype.transform = function (input, config) {
        if (!Array.isArray(input)) {
            return input;
        }
        var out = input.slice();
        // sort by multiple properties
        if (Array.isArray(config)) {
            return out.sort(function (a, b) {
                var l = config.length;
                for (var i = 0; i < l; ++i) {
                    var _a = OrderByPipe.extractFromConfig(config[i]), prop = _a[0], asc = _a[1];
                    var pos = OrderByPipe.orderCompare(prop, asc, a, b);
                    if (pos !== 0) {
                        return pos;
                    }
                }
                return 0;
            });
        }
        // sort by a single property value
        if (isString(config)) {
            var _a = OrderByPipe.extractFromConfig(config), prop = _a[0], asc = _a[1], sign = _a[2];
            if (config.length === 1) {
                // tslint:disable-next-line:switch-default
                switch (sign) {
                    case '+': return out.sort(OrderByPipe.simpleSort.bind(this));
                    case '-': return out.sort(OrderByPipe.simpleSort.bind(this)).reverse();
                }
            }
            return out.sort(OrderByPipe.orderCompare.bind(this, prop, asc));
        }
        // default sort by value
        return out.sort(OrderByPipe.simpleSort.bind(this));
    };
    OrderByPipe.simpleSort = function (a, b) {
        return isString(a) && isString(b)
            ? a.toLowerCase().localeCompare(b.toLowerCase())
            : a - b;
    };
    OrderByPipe.orderCompare = function (prop, asc, a, b) {
        var first = extractDeepPropertyByMapKey(a, prop);
        var second = extractDeepPropertyByMapKey(b, prop);
        if (first === second) {
            return 0;
        }
        if (isUndefined(first) || first === '') {
            return 1;
        }
        if (isUndefined(second) || second === '') {
            return -1;
        }
        if (isString(first) && isString(second)) {
            var pos = first.toLowerCase().localeCompare(second.toLowerCase());
            return asc ? pos : -pos;
        }
        return asc
            ? first - second
            : second - first;
    };
    OrderByPipe.extractFromConfig = function (config) {
        var sign = config.substr(0, 1);
        var prop = config.replace(/^[-+]/, '');
        var asc = sign !== '-';
        return [prop, asc, sign];
    };
    OrderByPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'orderBy' },] },
    ];
    /** @nocollapse */
    OrderByPipe.ctorParameters = function () { return []; };
    return OrderByPipe;
}());

var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// tslint:disable use-pipe-transform-interface
var GroupByImpurePipe = (function (_super) {
    __extends(GroupByImpurePipe, _super);
    function GroupByImpurePipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupByImpurePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'groupByImpure', pure: false },] },
    ];
    /** @nocollapse */
    GroupByImpurePipe.ctorParameters = function () { return []; };
    return GroupByImpurePipe;
}(GroupByPipe));

var __extends$1 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// tslint:disable use-pipe-transform-interface
var FilterByImpurePipe = (function (_super) {
    __extends$1(FilterByImpurePipe, _super);
    function FilterByImpurePipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilterByImpurePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'filterByImpure', pure: false },] },
    ];
    /** @nocollapse */
    FilterByImpurePipe.ctorParameters = function () { return []; };
    return FilterByImpurePipe;
}(FilterByPipe));

var __extends$2 = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
// tslint:disable use-pipe-transform-interface
var OrderByImpurePipe = (function (_super) {
    __extends$2(OrderByImpurePipe, _super);
    function OrderByImpurePipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OrderByImpurePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'orderByImpure', pure: false },] },
    ];
    /** @nocollapse */
    OrderByImpurePipe.ctorParameters = function () { return []; };
    return OrderByImpurePipe;
}(OrderByPipe));

var ARRAY_PIPES = [
    DiffPipe, FlattenPipe, InitialPipe, IntersectionPipe, ReversePipe, TailPipe,
    TrurthifyPipe, UnionPipe, UniquePipe, WithoutPipe, PluckPipe, ShufflePipe,
    EveryPipe, SomePipe, SamplePipe, GroupByPipe, GroupByImpurePipe,
    FilterByPipe, FilterByImpurePipe, OrderByPipe, OrderByImpurePipe,
];
var NgArrayPipesModule = (function () {
    function NgArrayPipesModule() {
    }
    NgArrayPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: ARRAY_PIPES,
                    imports: [],
                    exports: ARRAY_PIPES
                },] },
    ];
    /** @nocollapse */
    NgArrayPipesModule.ctorParameters = function () { return []; };
    return NgArrayPipesModule;
}());

var KeysPipe = (function () {
    function KeysPipe() {
    }
    KeysPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj);
    };
    KeysPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'keys' },] },
    ];
    /** @nocollapse */
    KeysPipe.ctorParameters = function () { return []; };
    return KeysPipe;
}());

var ValuesPipe = (function () {
    function ValuesPipe() {
    }
    ValuesPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).map(function (k) { return obj[k]; });
    };
    ValuesPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'values' },] },
    ];
    /** @nocollapse */
    ValuesPipe.ctorParameters = function () { return []; };
    return ValuesPipe;
}());

var PairsPipe = (function () {
    function PairsPipe() {
    }
    PairsPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).map(function (k) { return [k, obj[k]]; });
    };
    PairsPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'pairs' },] },
    ];
    /** @nocollapse */
    PairsPipe.ctorParameters = function () { return []; };
    return PairsPipe;
}());

var PickPipe = (function () {
    function PickPipe() {
    }
    PickPipe.prototype.transform = function (obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return args.reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
            var _a;
        }, {});
    };
    PickPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'pick' },] },
    ];
    /** @nocollapse */
    PickPipe.ctorParameters = function () { return []; };
    return PickPipe;
}());

var OmitPipe = (function () {
    function OmitPipe() {
    }
    OmitPipe.prototype.transform = function (obj) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj)
            .filter(function (k) { return !~args.indexOf(k); })
            .reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[k] = obj[k], _a));
            var _a;
        }, {});
    };
    OmitPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'omit' },] },
    ];
    /** @nocollapse */
    OmitPipe.ctorParameters = function () { return []; };
    return OmitPipe;
}());

var InvertPipe = (function () {
    function InvertPipe() {
    }
    InvertPipe.prototype.transform = function (obj) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj)
            .reduce(function (o, k) {
            return Object.assign(o, (_a = {}, _a[obj[k]] = k, _a));
            var _a;
        }, {});
    };
    InvertPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'invert' },] },
    ];
    /** @nocollapse */
    InvertPipe.ctorParameters = function () { return []; };
    return InvertPipe;
}());

var InvertByPipe = (function () {
    function InvertByPipe() {
    }
    InvertByPipe.prototype.transform = function (obj, cb) {
        if (Array.isArray(obj) || !isObject(obj)) {
            return obj;
        }
        return Object.keys(obj).reduce(function (o, k) {
            var key = cb ? cb(obj[k]) : obj[k];
            return Array.isArray(o[key])
                ? (o[key].push(k), o)
                : Object.assign(o, (_a = {}, _a[key] = [k], _a));
            var _a;
        }, {});
    };
    InvertByPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'invertBy' },] },
    ];
    /** @nocollapse */
    InvertByPipe.ctorParameters = function () { return []; };
    return InvertByPipe;
}());

var DiffObjPipe = (function () {
    function DiffObjPipe() {
    }
    DiffObjPipe.prototype.transform = function (obj, original) {
        if (original === void 0) { original = {}; }
        if (Array.isArray(obj) || Array.isArray(original) || !isObject(obj) || !isObject(original)) {
            return {};
        }
        return getKeysTwoObjects(obj, original).reduce(function (diff, key) {
            if (!isDeepEqual(original[key], obj[key])) {
                diff[key] = obj[key];
            }
            return diff;
        }, {});
    };
    DiffObjPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'diffObj' },] },
    ];
    /** @nocollapse */
    DiffObjPipe.ctorParameters = function () { return []; };
    return DiffObjPipe;
}());

var OBJECT_PIPES = [
    KeysPipe, ValuesPipe, PairsPipe, PickPipe, InvertPipe, InvertByPipe,
    OmitPipe, DiffObjPipe,
];
var NgObjectPipesModule = (function () {
    function NgObjectPipesModule() {
    }
    NgObjectPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: OBJECT_PIPES,
                    imports: [],
                    exports: OBJECT_PIPES
                },] },
    ];
    /** @nocollapse */
    NgObjectPipesModule.ctorParameters = function () { return []; };
    return NgObjectPipesModule;
}());

var UcWordsPipe = (function () {
    function UcWordsPipe() {
    }
    UcWordsPipe.prototype.transform = function (text) {
        if (isString(text)) {
            return text.split(' ')
                .map(function (sub) { return sub.slice(0, 1).toUpperCase() + sub.slice(1); })
                .join(' ');
        }
        return text;
    };
    UcWordsPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'ucwords' },] },
    ];
    /** @nocollapse */
    UcWordsPipe.ctorParameters = function () { return []; };
    return UcWordsPipe;
}());

var LeftTrimPipe = (function () {
    function LeftTrimPipe() {
    }
    LeftTrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(new RegExp("^[" + chars + "]+"), '')
            : text;
    };
    LeftTrimPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'ltrim' },] },
    ];
    /** @nocollapse */
    LeftTrimPipe.ctorParameters = function () { return []; };
    return LeftTrimPipe;
}());

var RepeatPipe = (function () {
    function RepeatPipe() {
    }
    RepeatPipe.prototype.transform = function (str, n, separator) {
        if (n === void 0) { n = 1; }
        if (separator === void 0) { separator = ''; }
        if (n <= 0) {
            throw new RangeError();
        }
        return n === 1 ? str : this.repeat(str, n - 1, separator);
    };
    RepeatPipe.prototype.repeat = function (str, n, separator) {
        return isString(str)
            ? (n === 0 ? str : (str + separator + this.repeat(str, n - 1, separator)))
            : str;
    };
    RepeatPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'repeat' },] },
    ];
    /** @nocollapse */
    RepeatPipe.ctorParameters = function () { return []; };
    return RepeatPipe;
}());

var RightTrimPipe = (function () {
    function RightTrimPipe() {
    }
    RightTrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(new RegExp("[" + chars + "]+$"), '')
            : text;
    };
    RightTrimPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'rtrim' },] },
    ];
    /** @nocollapse */
    RightTrimPipe.ctorParameters = function () { return []; };
    return RightTrimPipe;
}());

var ScanPipe = (function () {
    function ScanPipe() {
    }
    ScanPipe.prototype.transform = function (text, args) {
        if (args === void 0) { args = []; }
        return isString(text)
            ? text.replace(/\{(\d+)}/g, function (match, index) { return !isUndefined(args[index]) ? args[index] : match; })
            : text;
    };
    ScanPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'scan' },] },
    ];
    /** @nocollapse */
    ScanPipe.ctorParameters = function () { return []; };
    return ScanPipe;
}());

var ShortenPipe = (function () {
    function ShortenPipe() {
    }
    ShortenPipe.prototype.transform = function (text, length, suffix, wordBreak) {
        if (length === void 0) { length = 0; }
        if (suffix === void 0) { suffix = ''; }
        if (wordBreak === void 0) { wordBreak = true; }
        if (!isString(text)) {
            return text;
        }
        if (text.length > length) {
            if (wordBreak) {
                return text.slice(0, length) + suffix;
            }
            // tslint:disable-next-line:no-bitwise
            if (!!~text.indexOf(' ', length)) {
                return text.slice(0, text.indexOf(' ', length)) + suffix;
            }
        }
        return text;
    };
    ShortenPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'shorten' },] },
    ];
    /** @nocollapse */
    ShortenPipe.ctorParameters = function () { return []; };
    return ShortenPipe;
}());

var StripTagsPipe = (function () {
    function StripTagsPipe() {
    }
    StripTagsPipe.prototype.transform = function (text) {
        var allowedTags = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            allowedTags[_i - 1] = arguments[_i];
        }
        return allowedTags.length > 0
            ? text.replace(new RegExp("<(?!/?(" + allowedTags.join('|') + ")s*/?)[^>]+>", 'g'), '')
            : text.replace(/<(?:.|\s)*?>/g, '');
    };
    StripTagsPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'stripTags' },] },
    ];
    /** @nocollapse */
    StripTagsPipe.ctorParameters = function () { return []; };
    return StripTagsPipe;
}());

var TrimPipe = (function () {
    function TrimPipe() {
    }
    TrimPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text) ? text.replace(new RegExp("^[" + chars + "]+|[" + chars + "]+$", 'g'), '') : text;
    };
    TrimPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'trim' },] },
    ];
    /** @nocollapse */
    TrimPipe.ctorParameters = function () { return []; };
    return TrimPipe;
}());

var UcFirstPipe = (function () {
    function UcFirstPipe() {
    }
    UcFirstPipe.prototype.transform = function (text) {
        return isString(text)
            ? (text.slice(0, 1).toUpperCase() + text.slice(1))
            : text;
    };
    UcFirstPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'ucfirst' },] },
    ];
    /** @nocollapse */
    UcFirstPipe.ctorParameters = function () { return []; };
    return UcFirstPipe;
}());

var SlugifyPipe = (function () {
    function SlugifyPipe() {
    }
    SlugifyPipe.prototype.transform = function (str) {
        return isString(str)
            ? str.toLowerCase().trim()
                .replace(/[^\w\-]+/g, ' ')
                .replace(/\s+/g, '-')
            : str;
    };
    SlugifyPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'slugify' },] },
    ];
    /** @nocollapse */
    SlugifyPipe.ctorParameters = function () { return []; };
    return SlugifyPipe;
}());

var CamelizePipe = (function () {
    function CamelizePipe() {
    }
    CamelizePipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        if (!isString(text)) {
            return text;
        }
        return text.toLowerCase()
            .split(/[-_\s]/g)
            .filter(function (v) { return !!v; }).map(function (word, key) {
            return !key ? word : (word.slice(0, 1).toUpperCase() + word.slice(1));
        }).join('');
    };
    CamelizePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'camelize' },] },
    ];
    /** @nocollapse */
    CamelizePipe.ctorParameters = function () { return []; };
    return CamelizePipe;
}());

var LatinisePipe = (function () {
    function LatinisePipe() {
        // Source: http://semplicewebsites.com/removing-accents-javascript
        // tslint:disable-next-line whitespace max-line-length object-literal-key-quotes
        this.latinMap = { 'Á': 'A', 'Ă': 'A', 'Ắ': 'A', 'Ặ': 'A', 'Ằ': 'A', 'Ẳ': 'A', 'Ẵ': 'A', 'Ǎ': 'A', 'Â': 'A', 'Ấ': 'A', 'Ậ': 'A', 'Ầ': 'A', 'Ẩ': 'A', 'Ẫ': 'A', 'Ä': 'A', 'Ǟ': 'A', 'Ȧ': 'A', 'Ǡ': 'A', 'Ạ': 'A', 'Ȁ': 'A', 'À': 'A', 'Ả': 'A', 'Ȃ': 'A', 'Ā': 'A', 'Ą': 'A', 'Å': 'A', 'Ǻ': 'A', 'Ḁ': 'A', 'Ⱥ': 'A', 'Ã': 'A', 'Ꜳ': 'AA', 'Æ': 'AE', 'Ǽ': 'AE', 'Ǣ': 'AE', 'Ꜵ': 'AO', 'Ꜷ': 'AU', 'Ꜹ': 'AV', 'Ꜻ': 'AV', 'Ꜽ': 'AY', 'Ḃ': 'B', 'Ḅ': 'B', 'Ɓ': 'B', 'Ḇ': 'B', 'Ƀ': 'B', 'Ƃ': 'B', 'Ć': 'C', 'Č': 'C', 'Ç': 'C', 'Ḉ': 'C', 'Ĉ': 'C', 'Ċ': 'C', 'Ƈ': 'C', 'Ȼ': 'C', 'Ď': 'D', 'Ḑ': 'D', 'Ḓ': 'D', 'Ḋ': 'D', 'Ḍ': 'D', 'Ɗ': 'D', 'Ḏ': 'D', 'ǲ': 'D', 'ǅ': 'D', 'Đ': 'D', 'Ƌ': 'D', 'Ǳ': 'DZ', 'Ǆ': 'DZ', 'É': 'E', 'Ĕ': 'E', 'Ě': 'E', 'Ȩ': 'E', 'Ḝ': 'E', 'Ê': 'E', 'Ế': 'E', 'Ệ': 'E', 'Ề': 'E', 'Ể': 'E', 'Ễ': 'E', 'Ḙ': 'E', 'Ë': 'E', 'Ė': 'E', 'Ẹ': 'E', 'Ȅ': 'E', 'È': 'E', 'Ẻ': 'E', 'Ȇ': 'E', 'Ē': 'E', 'Ḗ': 'E', 'Ḕ': 'E', 'Ę': 'E', 'Ɇ': 'E', 'Ẽ': 'E', 'Ḛ': 'E', 'Ꝫ': 'ET', 'Ḟ': 'F', 'Ƒ': 'F', 'Ǵ': 'G', 'Ğ': 'G', 'Ǧ': 'G', 'Ģ': 'G', 'Ĝ': 'G', 'Ġ': 'G', 'Ɠ': 'G', 'Ḡ': 'G', 'Ǥ': 'G', 'Ḫ': 'H', 'Ȟ': 'H', 'Ḩ': 'H', 'Ĥ': 'H', 'Ⱨ': 'H', 'Ḧ': 'H', 'Ḣ': 'H', 'Ḥ': 'H', 'Ħ': 'H', 'Í': 'I', 'Ĭ': 'I', 'Ǐ': 'I', 'Î': 'I', 'Ï': 'I', 'Ḯ': 'I', 'İ': 'I', 'Ị': 'I', 'Ȉ': 'I', 'Ì': 'I', 'Ỉ': 'I', 'Ȋ': 'I', 'Ī': 'I', 'Į': 'I', 'Ɨ': 'I', 'Ĩ': 'I', 'Ḭ': 'I', 'Ꝺ': 'D', 'Ꝼ': 'F', 'Ᵹ': 'G', 'Ꞃ': 'R', 'Ꞅ': 'S', 'Ꞇ': 'T', 'Ꝭ': 'IS', 'Ĵ': 'J', 'Ɉ': 'J', 'Ḱ': 'K', 'Ǩ': 'K', 'Ķ': 'K', 'Ⱪ': 'K', 'Ꝃ': 'K', 'Ḳ': 'K', 'Ƙ': 'K', 'Ḵ': 'K', 'Ꝁ': 'K', 'Ꝅ': 'K', 'Ĺ': 'L', 'Ƚ': 'L', 'Ľ': 'L', 'Ļ': 'L', 'Ḽ': 'L', 'Ḷ': 'L', 'Ḹ': 'L', 'Ⱡ': 'L', 'Ꝉ': 'L', 'Ḻ': 'L', 'Ŀ': 'L', 'Ɫ': 'L', 'ǈ': 'L', 'Ł': 'L', 'Ǉ': 'LJ', 'Ḿ': 'M', 'Ṁ': 'M', 'Ṃ': 'M', 'Ɱ': 'M', 'Ń': 'N', 'Ň': 'N', 'Ņ': 'N', 'Ṋ': 'N', 'Ṅ': 'N', 'Ṇ': 'N', 'Ǹ': 'N', 'Ɲ': 'N', 'Ṉ': 'N', 'Ƞ': 'N', 'ǋ': 'N', 'Ñ': 'N', 'Ǌ': 'NJ', 'Ó': 'O', 'Ŏ': 'O', 'Ǒ': 'O', 'Ô': 'O', 'Ố': 'O', 'Ộ': 'O', 'Ồ': 'O', 'Ổ': 'O', 'Ỗ': 'O', 'Ö': 'O', 'Ȫ': 'O', 'Ȯ': 'O', 'Ȱ': 'O', 'Ọ': 'O', 'Ő': 'O', 'Ȍ': 'O', 'Ò': 'O', 'Ỏ': 'O', 'Ơ': 'O', 'Ớ': 'O', 'Ợ': 'O', 'Ờ': 'O', 'Ở': 'O', 'Ỡ': 'O', 'Ȏ': 'O', 'Ꝋ': 'O', 'Ꝍ': 'O', 'Ō': 'O', 'Ṓ': 'O', 'Ṑ': 'O', 'Ɵ': 'O', 'Ǫ': 'O', 'Ǭ': 'O', 'Ø': 'O', 'Ǿ': 'O', 'Õ': 'O', 'Ṍ': 'O', 'Ṏ': 'O', 'Ȭ': 'O', 'Ƣ': 'OI', 'Ꝏ': 'OO', 'Ɛ': 'E', 'Ɔ': 'O', 'Ȣ': 'OU', 'Ṕ': 'P', 'Ṗ': 'P', 'Ꝓ': 'P', 'Ƥ': 'P', 'Ꝕ': 'P', 'Ᵽ': 'P', 'Ꝑ': 'P', 'Ꝙ': 'Q', 'Ꝗ': 'Q', 'Ŕ': 'R', 'Ř': 'R', 'Ŗ': 'R', 'Ṙ': 'R', 'Ṛ': 'R', 'Ṝ': 'R', 'Ȑ': 'R', 'Ȓ': 'R', 'Ṟ': 'R', 'Ɍ': 'R', 'Ɽ': 'R', 'Ꜿ': 'C', 'Ǝ': 'E', 'Ś': 'S', 'Ṥ': 'S', 'Š': 'S', 'Ṧ': 'S', 'Ş': 'S', 'Ŝ': 'S', 'Ș': 'S', 'Ṡ': 'S', 'Ṣ': 'S', 'Ṩ': 'S', 'ẞ': 'SS', 'Ť': 'T', 'Ţ': 'T', 'Ṱ': 'T', 'Ț': 'T', 'Ⱦ': 'T', 'Ṫ': 'T', 'Ṭ': 'T', 'Ƭ': 'T', 'Ṯ': 'T', 'Ʈ': 'T', 'Ŧ': 'T', 'Ɐ': 'A', 'Ꞁ': 'L', 'Ɯ': 'M', 'Ʌ': 'V', 'Ꜩ': 'TZ', 'Ú': 'U', 'Ŭ': 'U', 'Ǔ': 'U', 'Û': 'U', 'Ṷ': 'U', 'Ü': 'U', 'Ǘ': 'U', 'Ǚ': 'U', 'Ǜ': 'U', 'Ǖ': 'U', 'Ṳ': 'U', 'Ụ': 'U', 'Ű': 'U', 'Ȕ': 'U', 'Ù': 'U', 'Ủ': 'U', 'Ư': 'U', 'Ứ': 'U', 'Ự': 'U', 'Ừ': 'U', 'Ử': 'U', 'Ữ': 'U', 'Ȗ': 'U', 'Ū': 'U', 'Ṻ': 'U', 'Ų': 'U', 'Ů': 'U', 'Ũ': 'U', 'Ṹ': 'U', 'Ṵ': 'U', 'Ꝟ': 'V', 'Ṿ': 'V', 'Ʋ': 'V', 'Ṽ': 'V', 'Ꝡ': 'VY', 'Ẃ': 'W', 'Ŵ': 'W', 'Ẅ': 'W', 'Ẇ': 'W', 'Ẉ': 'W', 'Ẁ': 'W', 'Ⱳ': 'W', 'Ẍ': 'X', 'Ẋ': 'X', 'Ý': 'Y', 'Ŷ': 'Y', 'Ÿ': 'Y', 'Ẏ': 'Y', 'Ỵ': 'Y', 'Ỳ': 'Y', 'Ƴ': 'Y', 'Ỷ': 'Y', 'Ỿ': 'Y', 'Ȳ': 'Y', 'Ɏ': 'Y', 'Ỹ': 'Y', 'Ź': 'Z', 'Ž': 'Z', 'Ẑ': 'Z', 'Ⱬ': 'Z', 'Ż': 'Z', 'Ẓ': 'Z', 'Ȥ': 'Z', 'Ẕ': 'Z', 'Ƶ': 'Z', 'Ĳ': 'IJ', 'Œ': 'OE', 'ᴀ': 'A', 'ᴁ': 'AE', 'ʙ': 'B', 'ᴃ': 'B', 'ᴄ': 'C', 'ᴅ': 'D', 'ᴇ': 'E', 'ꜰ': 'F', 'ɢ': 'G', 'ʛ': 'G', 'ʜ': 'H', 'ɪ': 'I', 'ʁ': 'R', 'ᴊ': 'J', 'ᴋ': 'K', 'ʟ': 'L', 'ᴌ': 'L', 'ᴍ': 'M', 'ɴ': 'N', 'ᴏ': 'O', 'ɶ': 'OE', 'ᴐ': 'O', 'ᴕ': 'OU', 'ᴘ': 'P', 'ʀ': 'R', 'ᴎ': 'N', 'ᴙ': 'R', 'ꜱ': 'S', 'ᴛ': 'T', 'ⱻ': 'E', 'ᴚ': 'R', 'ᴜ': 'U', 'ᴠ': 'V', 'ᴡ': 'W', 'ʏ': 'Y', 'ᴢ': 'Z', 'á': 'a', 'ă': 'a', 'ắ': 'a', 'ặ': 'a', 'ằ': 'a', 'ẳ': 'a', 'ẵ': 'a', 'ǎ': 'a', 'â': 'a', 'ấ': 'a', 'ậ': 'a', 'ầ': 'a', 'ẩ': 'a', 'ẫ': 'a', 'ä': 'a', 'ǟ': 'a', 'ȧ': 'a', 'ǡ': 'a', 'ạ': 'a', 'ȁ': 'a', 'à': 'a', 'ả': 'a', 'ȃ': 'a', 'ā': 'a', 'ą': 'a', 'ᶏ': 'a', 'ẚ': 'a', 'å': 'a', 'ǻ': 'a', 'ḁ': 'a', 'ⱥ': 'a', 'ã': 'a', 'ꜳ': 'aa', 'æ': 'ae', 'ǽ': 'ae', 'ǣ': 'ae', 'ꜵ': 'ao', 'ꜷ': 'au', 'ꜹ': 'av', 'ꜻ': 'av', 'ꜽ': 'ay', 'ḃ': 'b', 'ḅ': 'b', 'ɓ': 'b', 'ḇ': 'b', 'ᵬ': 'b', 'ᶀ': 'b', 'ƀ': 'b', 'ƃ': 'b', 'ɵ': 'o', 'ć': 'c', 'č': 'c', 'ç': 'c', 'ḉ': 'c', 'ĉ': 'c', 'ɕ': 'c', 'ċ': 'c', 'ƈ': 'c', 'ȼ': 'c', 'ď': 'd', 'ḑ': 'd', 'ḓ': 'd', 'ȡ': 'd', 'ḋ': 'd', 'ḍ': 'd', 'ɗ': 'd', 'ᶑ': 'd', 'ḏ': 'd', 'ᵭ': 'd', 'ᶁ': 'd', 'đ': 'd', 'ɖ': 'd', 'ƌ': 'd', 'ı': 'i', 'ȷ': 'j', 'ɟ': 'j', 'ʄ': 'j', 'ǳ': 'dz', 'ǆ': 'dz', 'é': 'e', 'ĕ': 'e', 'ě': 'e', 'ȩ': 'e', 'ḝ': 'e', 'ê': 'e', 'ế': 'e', 'ệ': 'e', 'ề': 'e', 'ể': 'e', 'ễ': 'e', 'ḙ': 'e', 'ë': 'e', 'ė': 'e', 'ẹ': 'e', 'ȅ': 'e', 'è': 'e', 'ẻ': 'e', 'ȇ': 'e', 'ē': 'e', 'ḗ': 'e', 'ḕ': 'e', 'ⱸ': 'e', 'ę': 'e', 'ᶒ': 'e', 'ɇ': 'e', 'ẽ': 'e', 'ḛ': 'e', 'ꝫ': 'et', 'ḟ': 'f', 'ƒ': 'f', 'ᵮ': 'f', 'ᶂ': 'f', 'ǵ': 'g', 'ğ': 'g', 'ǧ': 'g', 'ģ': 'g', 'ĝ': 'g', 'ġ': 'g', 'ɠ': 'g', 'ḡ': 'g', 'ᶃ': 'g', 'ǥ': 'g', 'ḫ': 'h', 'ȟ': 'h', 'ḩ': 'h', 'ĥ': 'h', 'ⱨ': 'h', 'ḧ': 'h', 'ḣ': 'h', 'ḥ': 'h', 'ɦ': 'h', 'ẖ': 'h', 'ħ': 'h', 'ƕ': 'hv', 'í': 'i', 'ĭ': 'i', 'ǐ': 'i', 'î': 'i', 'ï': 'i', 'ḯ': 'i', 'ị': 'i', 'ȉ': 'i', 'ì': 'i', 'ỉ': 'i', 'ȋ': 'i', 'ī': 'i', 'į': 'i', 'ᶖ': 'i', 'ɨ': 'i', 'ĩ': 'i', 'ḭ': 'i', 'ꝺ': 'd', 'ꝼ': 'f', 'ᵹ': 'g', 'ꞃ': 'r', 'ꞅ': 's', 'ꞇ': 't', 'ꝭ': 'is', 'ǰ': 'j', 'ĵ': 'j', 'ʝ': 'j', 'ɉ': 'j', 'ḱ': 'k', 'ǩ': 'k', 'ķ': 'k', 'ⱪ': 'k', 'ꝃ': 'k', 'ḳ': 'k', 'ƙ': 'k', 'ḵ': 'k', 'ᶄ': 'k', 'ꝁ': 'k', 'ꝅ': 'k', 'ĺ': 'l', 'ƚ': 'l', 'ɬ': 'l', 'ľ': 'l', 'ļ': 'l', 'ḽ': 'l', 'ȴ': 'l', 'ḷ': 'l', 'ḹ': 'l', 'ⱡ': 'l', 'ꝉ': 'l', 'ḻ': 'l', 'ŀ': 'l', 'ɫ': 'l', 'ᶅ': 'l', 'ɭ': 'l', 'ł': 'l', 'ǉ': 'lj', 'ſ': 's', 'ẜ': 's', 'ẛ': 's', 'ẝ': 's', 'ḿ': 'm', 'ṁ': 'm', 'ṃ': 'm', 'ɱ': 'm', 'ᵯ': 'm', 'ᶆ': 'm', 'ń': 'n', 'ň': 'n', 'ņ': 'n', 'ṋ': 'n', 'ȵ': 'n', 'ṅ': 'n', 'ṇ': 'n', 'ǹ': 'n', 'ɲ': 'n', 'ṉ': 'n', 'ƞ': 'n', 'ᵰ': 'n', 'ᶇ': 'n', 'ɳ': 'n', 'ñ': 'n', 'ǌ': 'nj', 'ó': 'o', 'ŏ': 'o', 'ǒ': 'o', 'ô': 'o', 'ố': 'o', 'ộ': 'o', 'ồ': 'o', 'ổ': 'o', 'ỗ': 'o', 'ö': 'o', 'ȫ': 'o', 'ȯ': 'o', 'ȱ': 'o', 'ọ': 'o', 'ő': 'o', 'ȍ': 'o', 'ò': 'o', 'ỏ': 'o', 'ơ': 'o', 'ớ': 'o', 'ợ': 'o', 'ờ': 'o', 'ở': 'o', 'ỡ': 'o', 'ȏ': 'o', 'ꝋ': 'o', 'ꝍ': 'o', 'ⱺ': 'o', 'ō': 'o', 'ṓ': 'o', 'ṑ': 'o', 'ǫ': 'o', 'ǭ': 'o', 'ø': 'o', 'ǿ': 'o', 'õ': 'o', 'ṍ': 'o', 'ṏ': 'o', 'ȭ': 'o', 'ƣ': 'oi', 'ꝏ': 'oo', 'ɛ': 'e', 'ᶓ': 'e', 'ɔ': 'o', 'ᶗ': 'o', 'ȣ': 'ou', 'ṕ': 'p', 'ṗ': 'p', 'ꝓ': 'p', 'ƥ': 'p', 'ᵱ': 'p', 'ᶈ': 'p', 'ꝕ': 'p', 'ᵽ': 'p', 'ꝑ': 'p', 'ꝙ': 'q', 'ʠ': 'q', 'ɋ': 'q', 'ꝗ': 'q', 'ŕ': 'r', 'ř': 'r', 'ŗ': 'r', 'ṙ': 'r', 'ṛ': 'r', 'ṝ': 'r', 'ȑ': 'r', 'ɾ': 'r', 'ᵳ': 'r', 'ȓ': 'r', 'ṟ': 'r', 'ɼ': 'r', 'ᵲ': 'r', 'ᶉ': 'r', 'ɍ': 'r', 'ɽ': 'r', 'ↄ': 'c', 'ꜿ': 'c', 'ɘ': 'e', 'ɿ': 'r', 'ś': 's', 'ṥ': 's', 'š': 's', 'ṧ': 's', 'ş': 's', 'ŝ': 's', 'ș': 's', 'ṡ': 's', 'ṣ': 's', 'ṩ': 's', 'ʂ': 's', 'ᵴ': 's', 'ᶊ': 's', 'ȿ': 's', 'ɡ': 'g', 'ß': 'ss', 'ᴑ': 'o', 'ᴓ': 'o', 'ᴝ': 'u', 'ť': 't', 'ţ': 't', 'ṱ': 't', 'ț': 't', 'ȶ': 't', 'ẗ': 't', 'ⱦ': 't', 'ṫ': 't', 'ṭ': 't', 'ƭ': 't', 'ṯ': 't', 'ᵵ': 't', 'ƫ': 't', 'ʈ': 't', 'ŧ': 't', 'ᵺ': 'th', 'ɐ': 'a', 'ᴂ': 'ae', 'ǝ': 'e', 'ᵷ': 'g', 'ɥ': 'h', 'ʮ': 'h', 'ʯ': 'h', 'ᴉ': 'i', 'ʞ': 'k', 'ꞁ': 'l', 'ɯ': 'm', 'ɰ': 'm', 'ᴔ': 'oe', 'ɹ': 'r', 'ɻ': 'r', 'ɺ': 'r', 'ⱹ': 'r', 'ʇ': 't', 'ʌ': 'v', 'ʍ': 'w', 'ʎ': 'y', 'ꜩ': 'tz', 'ú': 'u', 'ŭ': 'u', 'ǔ': 'u', 'û': 'u', 'ṷ': 'u', 'ü': 'u', 'ǘ': 'u', 'ǚ': 'u', 'ǜ': 'u', 'ǖ': 'u', 'ṳ': 'u', 'ụ': 'u', 'ű': 'u', 'ȕ': 'u', 'ù': 'u', 'ủ': 'u', 'ư': 'u', 'ứ': 'u', 'ự': 'u', 'ừ': 'u', 'ử': 'u', 'ữ': 'u', 'ȗ': 'u', 'ū': 'u', 'ṻ': 'u', 'ų': 'u', 'ᶙ': 'u', 'ů': 'u', 'ũ': 'u', 'ṹ': 'u', 'ṵ': 'u', 'ᵫ': 'ue', 'ꝸ': 'um', 'ⱴ': 'v', 'ꝟ': 'v', 'ṿ': 'v', 'ʋ': 'v', 'ᶌ': 'v', 'ⱱ': 'v', 'ṽ': 'v', 'ꝡ': 'vy', 'ẃ': 'w', 'ŵ': 'w', 'ẅ': 'w', 'ẇ': 'w', 'ẉ': 'w', 'ẁ': 'w', 'ⱳ': 'w', 'ẘ': 'w', 'ẍ': 'x', 'ẋ': 'x', 'ᶍ': 'x', 'ý': 'y', 'ŷ': 'y', 'ÿ': 'y', 'ẏ': 'y', 'ỵ': 'y', 'ỳ': 'y', 'ƴ': 'y', 'ỷ': 'y', 'ỿ': 'y', 'ȳ': 'y', 'ẙ': 'y', 'ɏ': 'y', 'ỹ': 'y', 'ź': 'z', 'ž': 'z', 'ẑ': 'z', 'ʑ': 'z', 'ⱬ': 'z', 'ż': 'z', 'ẓ': 'z', 'ȥ': 'z', 'ẕ': 'z', 'ᵶ': 'z', 'ᶎ': 'z', 'ʐ': 'z', 'ƶ': 'z', 'ɀ': 'z', 'ﬀ': 'ff', 'ﬃ': 'ffi', 'ﬄ': 'ffl', 'ﬁ': 'fi', 'ﬂ': 'fl', 'ĳ': 'ij', 'œ': 'oe', 'ﬆ': 'st', 'ₐ': 'a', 'ₑ': 'e', 'ᵢ': 'i', 'ⱼ': 'j', 'ₒ': 'o', 'ᵣ': 'r', 'ᵤ': 'u', 'ᵥ': 'v', 'ₓ': 'x' };
    }
    LatinisePipe.prototype.transform = function (text, chars) {
        var _this = this;
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(/[^A-Za-z0-9]/g, function (key) {
                return _this.latinMap[key] || key;
            }) : text;
    };
    LatinisePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'latinise' },] },
    ];
    /** @nocollapse */
    LatinisePipe.ctorParameters = function () { return []; };
    return LatinisePipe;
}());

var LinesPipe = (function () {
    function LinesPipe() {
    }
    LinesPipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.replace(/\r\n/g, '\n').split('\n')
            : text;
    };
    LinesPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'lines' },] },
    ];
    /** @nocollapse */
    LinesPipe.ctorParameters = function () { return []; };
    return LinesPipe;
}());

var UnderscorePipe = (function () {
    function UnderscorePipe() {
    }
    UnderscorePipe.prototype.transform = function (text, chars) {
        if (chars === void 0) { chars = '\\s'; }
        return isString(text)
            ? text.trim()
                .replace(/\s+/g, '')
                .replace(/[A-Z]/g, function (c, k) {
                return k ? "_" + c.toLowerCase() : c.toLowerCase();
            })
            : text;
    };
    UnderscorePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'underscore' },] },
    ];
    /** @nocollapse */
    UnderscorePipe.ctorParameters = function () { return []; };
    return UnderscorePipe;
}());

var MatchPipe = (function () {
    function MatchPipe() {
    }
    MatchPipe.prototype.transform = function (text, pattern, flags) {
        if (!isString(text)) {
            return text;
        }
        return text.match(new RegExp(pattern, flags));
    };
    MatchPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'match' },] },
    ];
    /** @nocollapse */
    MatchPipe.ctorParameters = function () { return []; };
    return MatchPipe;
}());

var TestPipe = (function () {
    function TestPipe() {
    }
    TestPipe.prototype.transform = function (text, pattern, flags) {
        if (!isString(text)) {
            return text;
        }
        return (new RegExp(pattern, flags)).test(text);
    };
    TestPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'test' },] },
    ];
    /** @nocollapse */
    TestPipe.ctorParameters = function () { return []; };
    return TestPipe;
}());

var LeftPadPipe = (function () {
    function LeftPadPipe() {
    }
    LeftPadPipe.prototype.transform = function (str, length, padCharacter) {
        if (padCharacter === void 0) { padCharacter = ' '; }
        if (!isString(str) || str.length >= length) {
            return str;
        }
        while (str.length < length) {
            str = padCharacter + str;
        }
        return str;
    };
    LeftPadPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'lpad' },] },
    ];
    /** @nocollapse */
    LeftPadPipe.ctorParameters = function () { return []; };
    return LeftPadPipe;
}());

var RightPadPipe = (function () {
    function RightPadPipe() {
    }
    RightPadPipe.prototype.transform = function (str, length, padCharacter) {
        if (length === void 0) { length = 1; }
        if (padCharacter === void 0) { padCharacter = ' '; }
        if (!isString(str) || str.length >= length) {
            return str;
        }
        while (str.length < length) {
            str = str + padCharacter;
        }
        return str;
    };
    RightPadPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'rpad' },] },
    ];
    /** @nocollapse */
    RightPadPipe.ctorParameters = function () { return []; };
    return RightPadPipe;
}());

var STRING_PIPES = [
    LeftTrimPipe, RepeatPipe, RightTrimPipe, ScanPipe, ShortenPipe,
    StripTagsPipe, TrimPipe, UcFirstPipe, UcWordsPipe, SlugifyPipe,
    CamelizePipe, LatinisePipe, LinesPipe, UnderscorePipe, MatchPipe,
    TestPipe, LeftPadPipe, RightPadPipe,
];
var NgStringPipesModule = (function () {
    function NgStringPipesModule() {
    }
    NgStringPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: STRING_PIPES,
                    imports: [],
                    exports: STRING_PIPES
                },] },
    ];
    /** @nocollapse */
    NgStringPipesModule.ctorParameters = function () { return []; };
    return NgStringPipesModule;
}());

var MaxPipe = (function () {
    function MaxPipe() {
    }
    MaxPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? Math.max.apply(Math, arr) : arr;
    };
    MaxPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'max' },] },
    ];
    /** @nocollapse */
    MaxPipe.ctorParameters = function () { return []; };
    return MaxPipe;
}());

var MinPipe = (function () {
    function MinPipe() {
    }
    MinPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? Math.min.apply(Math, arr) : arr;
    };
    MinPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'min' },] },
    ];
    /** @nocollapse */
    MinPipe.ctorParameters = function () { return []; };
    return MinPipe;
}());

var PercentagePipe = (function () {
    function PercentagePipe() {
    }
    PercentagePipe.prototype.transform = function (num, total, floor) {
        if (total === void 0) { total = 100; }
        if (floor === void 0) { floor = false; }
        if (isNaN(num)) {
            return num;
        }
        var percent = num * 100 / total;
        return floor ? Math.floor(percent) : percent;
    };
    PercentagePipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'percentage' },] },
    ];
    /** @nocollapse */
    PercentagePipe.ctorParameters = function () { return []; };
    return PercentagePipe;
}());

var SumPipe = (function () {
    function SumPipe() {
    }
    SumPipe.prototype.transform = function (arr) {
        return Array.isArray(arr)
            ? arr.reduce(function (sum, curr) { return sum + curr; }, 0)
            : arr;
    };
    SumPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'sum' },] },
    ];
    /** @nocollapse */
    SumPipe.ctorParameters = function () { return []; };
    return SumPipe;
}());

var FloorPipe = (function () {
    function FloorPipe() {
    }
    FloorPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        if (precision <= 0) {
            return Math.floor(num);
        }
        var tho = Math.pow(10, precision);
        return Math.floor(num * tho) / tho;
    };
    FloorPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'floor' },] },
    ];
    /** @nocollapse */
    FloorPipe.ctorParameters = function () { return []; };
    return FloorPipe;
}());

var RoundPipe = (function () {
    function RoundPipe() {
    }
    RoundPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        return applyPrecision(num, precision);
    };
    RoundPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'round' },] },
    ];
    /** @nocollapse */
    RoundPipe.ctorParameters = function () { return []; };
    return RoundPipe;
}());

var SqrtPipe = (function () {
    function SqrtPipe() {
    }
    SqrtPipe.prototype.transform = function (num) {
        return !isNaN(num)
            ? Math.sqrt(num)
            : num;
    };
    SqrtPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'sqrt' },] },
    ];
    /** @nocollapse */
    SqrtPipe.ctorParameters = function () { return []; };
    return SqrtPipe;
}());

var PowerPipe = (function () {
    function PowerPipe() {
    }
    PowerPipe.prototype.transform = function (num, power) {
        if (power === void 0) { power = 2; }
        return !isNaN(num)
            ? Math.pow(num, power)
            : num;
    };
    PowerPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'pow' },] },
    ];
    /** @nocollapse */
    PowerPipe.ctorParameters = function () { return []; };
    return PowerPipe;
}());

var CeilPipe = (function () {
    function CeilPipe() {
    }
    CeilPipe.prototype.transform = function (num, precision) {
        if (precision === void 0) { precision = 0; }
        if (precision <= 0) {
            return Math.ceil(num);
        }
        var tho = Math.pow(10, precision);
        return Math.ceil(num * tho) / tho;
    };
    CeilPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'ceil' },] },
    ];
    /** @nocollapse */
    CeilPipe.ctorParameters = function () { return []; };
    return CeilPipe;
}());

var DegreesPipe = (function () {
    function DegreesPipe() {
    }
    DegreesPipe.prototype.transform = function (radians) {
        if (!isNumberFinite(radians)) {
            return NaN;
        }
        return radians * 180 / Math.PI;
    };
    DegreesPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'degrees' },] },
    ];
    /** @nocollapse */
    DegreesPipe.ctorParameters = function () { return []; };
    return DegreesPipe;
}());

var BytesPipe = (function () {
    function BytesPipe() {
        this.dictionary = [
            { max: 1024, type: 'B' },
            { max: 1048576, type: 'KB' },
            { max: 1073741824, type: 'MB' },
            { max: 1.0995116e12, type: 'GB' },
        ];
    }
    BytesPipe.prototype.transform = function (value, precision) {
        if (!isNumberFinite(value)) {
            return NaN;
        }
        var format = this.dictionary.find(function (d) { return value < d.max; }) || this.dictionary[this.dictionary.length - 1];
        var calc = value / (format.max / 1024);
        var num = isUndefined(precision) ? calc : applyPrecision(calc, precision);
        return num + " " + format.type;
    };
    BytesPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'bytes' },] },
    ];
    /** @nocollapse */
    BytesPipe.ctorParameters = function () { return []; };
    return BytesPipe;
}());

var RadiansPipe = (function () {
    function RadiansPipe() {
    }
    RadiansPipe.prototype.transform = function (degrees) {
        if (!isNumberFinite(degrees)) {
            return NaN;
        }
        return degrees * Math.PI / 180;
    };
    RadiansPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'radians' },] },
    ];
    /** @nocollapse */
    RadiansPipe.ctorParameters = function () { return []; };
    return RadiansPipe;
}());

var MATH_PIPES = [
    MaxPipe, MinPipe, PercentagePipe, SumPipe, FloorPipe, RoundPipe, SqrtPipe, PowerPipe,
    CeilPipe, DegreesPipe, BytesPipe, RadiansPipe,
];
var NgMathPipesModule = (function () {
    function NgMathPipesModule() {
    }
    NgMathPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: MATH_PIPES,
                    imports: [],
                    exports: MATH_PIPES
                },] },
    ];
    /** @nocollapse */
    NgMathPipesModule.ctorParameters = function () { return []; };
    return NgMathPipesModule;
}());

var IsDefinedPipe = (function () {
    function IsDefinedPipe() {
    }
    IsDefinedPipe.prototype.transform = function (input) {
        return !isUndefined(input);
    };
    IsDefinedPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isDefined' },] },
    ];
    /** @nocollapse */
    IsDefinedPipe.ctorParameters = function () { return []; };
    return IsDefinedPipe;
}());

var IsNullPipe = (function () {
    function IsNullPipe() {
    }
    IsNullPipe.prototype.transform = function (input) {
        return input === null;
    };
    IsNullPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isNull' },] },
    ];
    /** @nocollapse */
    IsNullPipe.ctorParameters = function () { return []; };
    return IsNullPipe;
}());

var IsUndefinedPipe = (function () {
    function IsUndefinedPipe() {
    }
    IsUndefinedPipe.prototype.transform = function (input) {
        return isUndefined(input);
    };
    IsUndefinedPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isUndefined' },] },
    ];
    /** @nocollapse */
    IsUndefinedPipe.ctorParameters = function () { return []; };
    return IsUndefinedPipe;
}());

var IsStringPipe = (function () {
    function IsStringPipe() {
    }
    IsStringPipe.prototype.transform = function (input) {
        return isString(input);
    };
    IsStringPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isString' },] },
    ];
    /** @nocollapse */
    IsStringPipe.ctorParameters = function () { return []; };
    return IsStringPipe;
}());

var IsFunctionPipe = (function () {
    function IsFunctionPipe() {
    }
    IsFunctionPipe.prototype.transform = function (input) {
        return isFunction(input);
    };
    IsFunctionPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isFunction' },] },
    ];
    /** @nocollapse */
    IsFunctionPipe.ctorParameters = function () { return []; };
    return IsFunctionPipe;
}());

var IsNumberPipe = (function () {
    function IsNumberPipe() {
    }
    IsNumberPipe.prototype.transform = function (input) {
        return isNumber(input);
    };
    IsNumberPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isNumber' },] },
    ];
    /** @nocollapse */
    IsNumberPipe.ctorParameters = function () { return []; };
    return IsNumberPipe;
}());

var IsArrayPipe = (function () {
    function IsArrayPipe() {
    }
    IsArrayPipe.prototype.transform = function (input) {
        return Array.isArray(input);
    };
    IsArrayPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isArray' },] },
    ];
    /** @nocollapse */
    IsArrayPipe.ctorParameters = function () { return []; };
    return IsArrayPipe;
}());

var IsObjectPipe = (function () {
    function IsObjectPipe() {
    }
    IsObjectPipe.prototype.transform = function (input) {
        return isObject(input);
    };
    IsObjectPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isObject' },] },
    ];
    /** @nocollapse */
    IsObjectPipe.ctorParameters = function () { return []; };
    return IsObjectPipe;
}());

var IsGreaterEqualThanPipe = (function () {
    function IsGreaterEqualThanPipe() {
    }
    IsGreaterEqualThanPipe.prototype.transform = function (input, other) {
        return input >= other;
    };
    IsGreaterEqualThanPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isGreaterEqualThan' },] },
    ];
    /** @nocollapse */
    IsGreaterEqualThanPipe.ctorParameters = function () { return []; };
    return IsGreaterEqualThanPipe;
}());

var IsGreaterThanPipe = (function () {
    function IsGreaterThanPipe() {
    }
    IsGreaterThanPipe.prototype.transform = function (input, other) {
        return input > other;
    };
    IsGreaterThanPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isGreaterThan' },] },
    ];
    /** @nocollapse */
    IsGreaterThanPipe.ctorParameters = function () { return []; };
    return IsGreaterThanPipe;
}());

var IsLessEqualThanPipe = (function () {
    function IsLessEqualThanPipe() {
    }
    IsLessEqualThanPipe.prototype.transform = function (input, other) {
        return input <= other;
    };
    IsLessEqualThanPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isLessEqualThan' },] },
    ];
    /** @nocollapse */
    IsLessEqualThanPipe.ctorParameters = function () { return []; };
    return IsLessEqualThanPipe;
}());

var IsEqualToPipe = (function () {
    function IsEqualToPipe() {
    }
    IsEqualToPipe.prototype.transform = function (input, other) {
        // tslint:disable-next-line:triple-equals
        return input == other;
    };
    IsEqualToPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isEqualTo' },] },
    ];
    /** @nocollapse */
    IsEqualToPipe.ctorParameters = function () { return []; };
    return IsEqualToPipe;
}());

var IsNotEqualToPipe = (function () {
    function IsNotEqualToPipe() {
    }
    IsNotEqualToPipe.prototype.transform = function (input, other) {
        // tslint:disable-next-line:triple-equals
        return input != other;
    };
    IsNotEqualToPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isNotEqualTo' },] },
    ];
    /** @nocollapse */
    IsNotEqualToPipe.ctorParameters = function () { return []; };
    return IsNotEqualToPipe;
}());

var IsIdenticalToPipe = (function () {
    function IsIdenticalToPipe() {
    }
    IsIdenticalToPipe.prototype.transform = function (input, other) {
        return input === other;
    };
    IsIdenticalToPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isIdenticalTo' },] },
    ];
    /** @nocollapse */
    IsIdenticalToPipe.ctorParameters = function () { return []; };
    return IsIdenticalToPipe;
}());

var IsNotIdenticalToPipe = (function () {
    function IsNotIdenticalToPipe() {
    }
    IsNotIdenticalToPipe.prototype.transform = function (input, other) {
        return input !== other;
    };
    IsNotIdenticalToPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isNotIdenticalTo' },] },
    ];
    /** @nocollapse */
    IsNotIdenticalToPipe.ctorParameters = function () { return []; };
    return IsNotIdenticalToPipe;
}());

var IsLessThanPipe = (function () {
    function IsLessThanPipe() {
    }
    IsLessThanPipe.prototype.transform = function (input, other) {
        return input < other;
    };
    IsLessThanPipe.decorators = [
        { type: _angular_core.Pipe, args: [{ name: 'isLessThan' },] },
    ];
    /** @nocollapse */
    IsLessThanPipe.ctorParameters = function () { return []; };
    return IsLessThanPipe;
}());

var BOOLEAN_PIPES = [
    IsDefinedPipe, IsNullPipe, IsUndefinedPipe, IsStringPipe, IsFunctionPipe, IsNumberPipe,
    IsArrayPipe, IsObjectPipe, IsGreaterEqualThanPipe, IsGreaterThanPipe, IsLessEqualThanPipe,
    IsLessEqualThanPipe, IsEqualToPipe, IsNotEqualToPipe, IsIdenticalToPipe, IsNotIdenticalToPipe,
    IsLessThanPipe,
];
var NgBooleanPipesModule = (function () {
    function NgBooleanPipesModule() {
    }
    NgBooleanPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    declarations: BOOLEAN_PIPES,
                    imports: [],
                    exports: BOOLEAN_PIPES
                },] },
    ];
    /** @nocollapse */
    NgBooleanPipesModule.ctorParameters = function () { return []; };
    return NgBooleanPipesModule;
}());

var NgPipesModule = (function () {
    function NgPipesModule() {
    }
    NgPipesModule.decorators = [
        { type: _angular_core.NgModule, args: [{
                    exports: [NgArrayPipesModule, NgStringPipesModule, NgMathPipesModule, NgBooleanPipesModule, NgObjectPipesModule]
                },] },
    ];
    /** @nocollapse */
    NgPipesModule.ctorParameters = function () { return []; };
    return NgPipesModule;
}());

exports.NgPipesModule = NgPipesModule;
exports.NgArrayPipesModule = NgArrayPipesModule;
exports.DiffPipe = DiffPipe;
exports.InitialPipe = InitialPipe;
exports.FlattenPipe = FlattenPipe;
exports.IntersectionPipe = IntersectionPipe;
exports.ReversePipe = ReversePipe;
exports.TailPipe = TailPipe;
exports.TrurthifyPipe = TrurthifyPipe;
exports.UnionPipe = UnionPipe;
exports.UniquePipe = UniquePipe;
exports.WithoutPipe = WithoutPipe;
exports.PluckPipe = PluckPipe;
exports.ShufflePipe = ShufflePipe;
exports.EveryPipe = EveryPipe;
exports.SomePipe = SomePipe;
exports.SamplePipe = SamplePipe;
exports.GroupByPipe = GroupByPipe;
exports.FilterByPipe = FilterByPipe;
exports.OrderByPipe = OrderByPipe;
exports.GroupByImpurePipe = GroupByImpurePipe;
exports.FilterByImpurePipe = FilterByImpurePipe;
exports.OrderByImpurePipe = OrderByImpurePipe;
exports.NgObjectPipesModule = NgObjectPipesModule;
exports.KeysPipe = KeysPipe;
exports.ValuesPipe = ValuesPipe;
exports.PairsPipe = PairsPipe;
exports.PickPipe = PickPipe;
exports.OmitPipe = OmitPipe;
exports.InvertPipe = InvertPipe;
exports.InvertByPipe = InvertByPipe;
exports.DiffObjPipe = DiffObjPipe;
exports.STRING_PIPES = STRING_PIPES;
exports.NgStringPipesModule = NgStringPipesModule;
exports.UcWordsPipe = UcWordsPipe;
exports.LeftTrimPipe = LeftTrimPipe;
exports.RepeatPipe = RepeatPipe;
exports.RightTrimPipe = RightTrimPipe;
exports.ScanPipe = ScanPipe;
exports.ShortenPipe = ShortenPipe;
exports.StripTagsPipe = StripTagsPipe;
exports.TrimPipe = TrimPipe;
exports.UcFirstPipe = UcFirstPipe;
exports.SlugifyPipe = SlugifyPipe;
exports.CamelizePipe = CamelizePipe;
exports.LatinisePipe = LatinisePipe;
exports.LinesPipe = LinesPipe;
exports.UnderscorePipe = UnderscorePipe;
exports.MatchPipe = MatchPipe;
exports.TestPipe = TestPipe;
exports.LeftPadPipe = LeftPadPipe;
exports.RightPadPipe = RightPadPipe;
exports.MATH_PIPES = MATH_PIPES;
exports.NgMathPipesModule = NgMathPipesModule;
exports.MaxPipe = MaxPipe;
exports.MinPipe = MinPipe;
exports.PercentagePipe = PercentagePipe;
exports.SumPipe = SumPipe;
exports.FloorPipe = FloorPipe;
exports.RoundPipe = RoundPipe;
exports.SqrtPipe = SqrtPipe;
exports.PowerPipe = PowerPipe;
exports.CeilPipe = CeilPipe;
exports.DegreesPipe = DegreesPipe;
exports.BytesPipe = BytesPipe;
exports.BOOLEAN_PIPES = BOOLEAN_PIPES;
exports.NgBooleanPipesModule = NgBooleanPipesModule;
exports.IsDefinedPipe = IsDefinedPipe;
exports.IsNullPipe = IsNullPipe;
exports.IsUndefinedPipe = IsUndefinedPipe;
exports.IsStringPipe = IsStringPipe;
exports.IsFunctionPipe = IsFunctionPipe;
exports.IsNumberPipe = IsNumberPipe;
exports.IsArrayPipe = IsArrayPipe;
exports.IsObjectPipe = IsObjectPipe;
exports.IsGreaterEqualThanPipe = IsGreaterEqualThanPipe;
exports.IsGreaterThanPipe = IsGreaterThanPipe;
exports.IsLessEqualThanPipe = IsLessEqualThanPipe;
exports.IsEqualToPipe = IsEqualToPipe;
exports.IsNotEqualToPipe = IsNotEqualToPipe;
exports.IsIdenticalToPipe = IsIdenticalToPipe;
exports.IsNotIdenticalToPipe = IsNotIdenticalToPipe;
exports.IsLessThanPipe = IsLessThanPipe;

Object.defineProperty(exports, '__esModule', { value: true });

})));
